package generator

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"text/template"

	"github.com/ameliaikeda/protoc-gen-router/service"
	"github.com/monzo/terrors"
	"google.golang.org/protobuf/compiler/protogen"
)

const handlerTemplate = `// Code generated by protoc-gen-router; DO NOT EDIT.

// Package handler deals with all HTTP communication to a service, via protobuf.
// See proto/package.proto within this service for details of all HTTP routes.
package handler

import (
	"github.com/monzo/typhon"
)

var router = &typhon.Router{}

func init() {
	{{- range .RPCs }}
		router.Register("{{ .Method }}", "{{ .Path }}", handle{{ .Name }})
	{{- end }}
}

// Service turns our router into this service.
func Service() typhon.Service {
	return router.Serve()
}`

var handler = template.Must(template.New("protoc-gen-handler").Parse(handlerTemplate))

func GenerateHandler(plugin *protogen.Plugin, svc *service.Service) error {
	var buf bytes.Buffer
	if err := handler.Execute(&buf, svc); err != nil {
		return terrors.WrapWithCode(err, nil, "template.handler")
	}

	b, err := format.Source(buf.Bytes())
	if err != nil {
		return terrors.WrapWithCode(err, nil, "template.handler.format_source")
	}

	folder := svc.Directory + "/handler"
	if err := createHandlerFolder(folder); err != nil {
		return err
	}

	f := plugin.NewGeneratedFile(folder+"/router.go", protogen.GoImportPath(svc.FullPackage))

	written, err := f.Write(b)
	if err != nil {
		return terrors.WrapWithCode(err, nil, "template.router.write_file_failed")
	}

	if written != len(b) {
		return terrors.New("template.router.write_file_incomplete", fmt.Sprintf("Expected %d bytes written, got %d", len(b), written), nil)
	}

	// now generate the RPCs
	for _, rpc := range svc.RPCs {
		if err := GenerateRPC(plugin, svc, rpc, folder); err != nil {
			return err
		}
	}

	return nil
}

func createHandlerFolder(folder string) error {
	if _, err := os.Stat(folder); os.IsNotExist(err) {
		if err := os.MkdirAll(folder, 0755); err != nil {
			return terrors.WrapWithCode(err, nil, "template.services.create_dir_failed")
		}
	} else if err != nil {
		return terrors.WrapWithCode(err, nil, "template.services.stat_dir_failed")
	}

	return nil
}
